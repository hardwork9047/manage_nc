<template>
  <v-container>
    <v-row>
      <v-col>
        <v-card>
          <v-card-title>Nurse Call Data</v-card-title>
          <v-card-subtitle v-if="!data.length" class="text-gray-500">Loading data...</v-card-subtitle>
          <v-data-table :headers="headers" :items="data" v-if="data.length"></v-data-table>
          <v-btn @click="addData" class="mt-4" color="primary">Add Data</v-btn>
        </v-card>
      </v-col>
    </v-row>
  </v-container>
</template>

<script setup>
import { ref, onMounted, onBeforeUnmount } from 'vue';
import axios from 'axios';

const data = ref([]);

const getBaseURL = () => {
  const hostname = window.location.hostname;
  if (/^192\./.test(hostname)) {
    // IPアドレスが192.*.*.*の場合、ポート指定
    return `${window.location.protocol}//${hostname}:8080`;
  } else if (/^172\./.test(hostname)) {
    // IPアドレスが172.*.*.*の場合、固定のIPを使用
    return `${window.location.protocol}//172.34.0.7:8080`;
  } else {
    // その他の場合
    return `${window.location.origin}`;
  }
};

const fetchData = async () => {
  const baseURL = getBaseURL();
  console.log('Fetching data...');
  try {
    const response = await axios.post(`${baseURL}/select-tables/`, { room: '101' });
    console.log('Data fetched:', response.data.data);
    data.value = response.data.data;
  } catch (error) {
    console.error('Error fetching data:', error);
  }
};

onMounted(() => {
  fetchData();
  const intervalId = setInterval(fetchData, 1000); // 1秒ごとにデータを再取得

  // コンポーネントが破棄されるときにインターバルをクリア
  onBeforeUnmount(() => {
    clearInterval(intervalId);
  });
});

const addData = async () => {
  const baseURL = getBaseURL();
  try {
    console.log('Adding data...');
    const newEntry = {
      room: '101'
    };
    await axios.post(`${baseURL}/add-room/`, newEntry);
    // データを再取得して更新する
    fetchData();
  } catch (error) {
    console.error('Error adding data:', error);
  }
};
</script>

<style scoped>
/* カスタムCSSが必要な場合はここに追加 */
</style>
